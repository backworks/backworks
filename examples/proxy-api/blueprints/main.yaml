name: "Proxy API"
description: "Simple proxy example demonstrating basic proxying to external services"

endpoints:
  # GitHub API proxy with inline handler
  - path: "/github/{path}"
    method: [GET, POST]
    description: "Proxy to GitHub API with inline request transformation"
    handler: |
      async function handler(req, res) {
        const githubPath = req.path_params?.path || '';
        const targetUrl = `https://api.github.com/${githubPath}`;
        
        try {
          console.log(`Proxying GitHub request to: ${targetUrl}`);
          
          // Simulate GitHub API response (in real implementation, use fetch)
          let mockResponse;
          
          if (githubPath.includes('users/')) {
            mockResponse = {
              status: 200,
              body: {
                login: "octocat",
                id: 1,
                node_id: "MDQ6VXNlcjE=",
                avatar_url: "https://github.com/images/error/octocat_happy.gif",
                gravatar_id: "",
                url: "https://api.github.com/users/octocat",
                html_url: "https://github.com/octocat",
                type: "User",
                site_admin: false,
                name: "monalisa octocat",
                company: "GitHub",
                blog: "https://github.com/blog",
                location: "San Francisco",
                email: "octocat@github.com",
                public_repos: 2,
                public_gists: 1,
                followers: 20,
                following: 0,
                created_at: "2008-01-14T04:33:35Z",
                updated_at: "2008-01-14T04:33:35Z"
              }
            };
          } else if (githubPath.includes('repos/')) {
            mockResponse = {
              status: 200,
              body: {
                id: 1296269,
                node_id: "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                name: "Hello-World",
                full_name: "octocat/Hello-World",
                private: false,
                owner: {
                  login: "octocat",
                  id: 1
                },
                html_url: "https://github.com/octocat/Hello-World",
                description: "This your first repo!",
                fork: false,
                url: "https://api.github.com/repos/octocat/Hello-World",
                created_at: "2011-01-26T19:01:12Z",
                updated_at: "2011-01-26T19:14:43Z",
                pushed_at: "2011-01-26T19:06:43Z",
                git_url: "git://github.com/octocat/Hello-World.git",
                ssh_url: "git@github.com:octocat/Hello-World.git",
                clone_url: "https://github.com/octocat/Hello-World.git",
                size: 108,
                stargazers_count: 80,
                watchers_count: 9,
                language: "C",
                has_issues: true,
                has_projects: true,
                has_wiki: true,
                has_pages: false,
                forks_count: 9,
                open_issues_count: 0,
                forks: 9,
                open_issues: 0,
                watchers: 80,
                default_branch: "master"
              }
            };
          } else {
            mockResponse = {
              status: 200,
              body: {
                message: `GitHub API proxy response for path: ${githubPath}`,
                path: githubPath,
                method: req.method
              }
            };
          }
          
          return {
            status: mockResponse.status,
            headers: {
              'Content-Type': 'application/json',
              'X-Proxy-Target': 'api.github.com',
              'X-Handler-Type': 'inline-proxy',
              'User-Agent': 'Backworks-Proxy/1.0'
            },
            body: mockResponse.body
          };
          
        } catch (error) {
          console.error('GitHub proxy error:', error);
          return {
            status: 502,
            body: {
              error: 'GitHub proxy request failed',
              message: error.message,
              target: targetUrl
            }
          };
        }
      }

  # HTTPBin proxy with load balancing simulation
  - path: "/httpbin/{path}"
    method: [GET, POST, PUT, DELETE]
    description: "Proxy to HTTPBin with load balancing and health checks"
    handler: |
      async function handler(req, res) {
        const httpbinPath = req.path_params?.path || '';
        
        // Simulate load balancing between primary and backup
        const targets = [
          { name: "primary", url: "https://httpbin.org", weight: 0.7 },
          { name: "backup", url: "https://httpbingo.org", weight: 0.3 }
        ];
        
        // Simple weighted random selection
        const selectedTarget = Math.random() < 0.7 ? targets[0] : targets[1];
        const targetUrl = `${selectedTarget.url}/${httpbinPath}`;
        
        try {
          console.log(`Load balancing to ${selectedTarget.name}: ${targetUrl}`);
          
          // Simulate HTTPBin response based on the path
          let mockResponse;
          
          if (httpbinPath === 'ip') {
            mockResponse = {
              status: 200,
              body: {
                origin: "203.0.113.195"
              }
            };
          } else if (httpbinPath === 'user-agent') {
            mockResponse = {
              status: 200,
              body: {
                "user-agent": req.headers?.['user-agent'] || "Backworks-Proxy/1.0"
              }
            };
          } else if (httpbinPath.startsWith('status/')) {
            const statusCode = parseInt(httpbinPath.split('/')[1]);
            mockResponse = {
              status: statusCode,
              body: statusCode >= 400 ? { error: `HTTP ${statusCode}` } : { status: statusCode }
            };
          } else if (httpbinPath === 'headers') {
            mockResponse = {
              status: 200,
              body: {
                headers: req.headers || {}
              }
            };
          } else if (req.method === 'POST' && req.body) {
            mockResponse = {
              status: 200,
              body: {
                args: req.query_params || {},
                data: JSON.stringify(req.body),
                files: {},
                form: {},
                headers: req.headers || {},
                json: req.body,
                origin: "203.0.113.195",
                url: targetUrl
              }
            };
          } else {
            mockResponse = {
              status: 200,
              body: {
                args: req.query_params || {},
                headers: req.headers || {},
                origin: "203.0.113.195",
                url: targetUrl,
                path: httpbinPath,
                method: req.method
              }
            };
          }
          
          return {
            status: mockResponse.status,
            headers: {
              'Content-Type': 'application/json',
              'X-Proxy-Target': selectedTarget.name,
              'X-Target-URL': selectedTarget.url,
              'X-Load-Balancer': 'weighted-random',
              'X-Handler-Type': 'inline-proxy'
            },
            body: mockResponse.body
          };
          
        } catch (error) {
          console.error('HTTPBin proxy error:', error);
          return {
            status: 502,
            body: {
              error: 'HTTPBin proxy request failed',
              message: error.message,
              target: targetUrl,
              selected_target: selectedTarget.name
            }
          };
        }
      }

  # Health check endpoint
  - path: "/health"
    method: GET
    description: "Health check for proxy services"
    handler: |
      function handler(req, res) {
        return {
          status: 200,
          headers: {
            'Content-Type': 'application/json'
          },
          body: {
            status: "healthy",
            timestamp: new Date().toISOString(),
            proxy_targets: [
              { name: "github", url: "https://api.github.com", status: "active" },
              { name: "httpbin-primary", url: "https://httpbin.org", status: "active" },
              { name: "httpbin-backup", url: "https://httpbingo.org", status: "standby" }
            ],
            example_type: "proxy-api"
          }
        };
      }
