name: "simple_user_api"
description: "A simple user management API demonstrating basic Backworks concepts"
version: "1.0.0"

# Start with mock mode for instant prototyping
mode: "mock"

# Plugin configurations - modular enhancements
plugins:
  # AI Enhancement Plugin (optional)
  ai:
    enabled: true
    config:
      features:
        - "smart_responses"
        - "pattern_detection"
      model: "gpt-3.5-turbo"
      context_window: 4000
      timeout_seconds: 30
      cache_responses: true
      smart_responses:
        enabled: true
        creativity: 0.7
        consistent_personas: true
      pattern_detection:
        enabled: true
        min_requests: 10
        confidence_threshold: 0.8
      config_generation:
        enabled: false
        auto_suggest: false

# Enable visual dashboard
dashboard:
  enabled: true
  port: 3000
  features:
    - "flows"
    - "metrics"
    - "logs"

# API endpoints
endpoints:
  # Get all users / Create new user
  users:
    path: "/users"
    methods: ["GET", "POST"]
    description: "Manage users collection"
    
    # Mock responses for different HTTP methods
    mock_responses:
      GET:
        status: 200
        headers:
          "Content-Type": "application/json"
          "X-Total-Count": "2"
        body:
          - id: 1
            name: "John Doe"
            email: "john@example.com"
            created_at: "2025-01-15T10:00:00Z"
            status: "active"
          - id: 2
            name: "Jane Smith"
            email: "jane@example.com"
            created_at: "2025-01-16T11:30:00Z"
            status: "active"
            
      POST:
        status: 201
        headers:
          "Content-Type": "application/json"
          "Location": "/users/${random_int(100, 999)}"
        body:
          id: "${random_int(100, 999)}"
          name: "${request.body.name}"
          email: "${request.body.email}"
          created_at: "${now()}"
          status: "active"
          message: "User created successfully"

  # Individual user operations
  user_detail:
    path: "/users/{id}"
    methods: ["GET", "PUT", "DELETE"]
    description: "Individual user operations"
    
    mock_responses:
      GET:
        status: 200
        headers:
          "Content-Type": "application/json"
        body:
          id: "${path.id}"
          name: "User ${path.id}"
          email: "user${path.id}@example.com"
          created_at: "${date_subtract(now(), ${random_int(1, 30)})}"
          status: "active"
          profile:
            bio: "Software developer and technology enthusiast"
            location: "San Francisco, CA"
            avatar_url: "https://api.dicebear.com/7.x/avataaars/svg?seed=${path.id}"
            
      PUT:
        status: 200
        headers:
          "Content-Type": "application/json"
        body:
          id: "${path.id}"
          name: "${request.body.name || 'User ' + path.id}"
          email: "${request.body.email || 'user' + path.id + '@example.com'}"
          updated_at: "${now()}"
          status: "active"
          message: "User updated successfully"
          
      DELETE:
        status: 200
        headers:
          "Content-Type": "application/json"
        body:
          id: "${path.id}"
          message: "User deleted successfully"
          deleted_at: "${now()}"

  # User statistics endpoint
  user_stats:
    path: "/users/stats"
    methods: ["GET"]
    description: "Get user statistics"
    
    mock:
      data:
        total_users: "${random_int(500, 2000)}"
        active_users: "${random_int(400, 1800)}"
        new_today: "${random_int(5, 50)}"
        growth_rate: "${random_float(0.5, 15.2)}"
        last_updated: "${now()}"

  # Search users endpoint
  search_users:
    path: "/users/search"
    methods: ["GET"]
    description: "Search users by query parameter"
    
    mock:
      data:
        query: "${query.q || 'all'}"
        limit: "${query.limit || 10}"
        results:
          - id: 1
            name: "John Doe"
            email: "john@example.com"
            relevance: 0.95
          - id: 2  
            name: "Jane Smith"
            email: "jane@example.com"
            relevance: 0.87
        total_results: 2
        search_time_ms: "${random_int(10, 100)}"

# Global response headers
global_headers:
  "X-API-Version": "1.0.0"
  "X-Powered-By": "Backworks"
  "Access-Control-Allow-Origin": "*"
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS"
  "Access-Control-Allow-Headers": "Content-Type, Authorization"

# Enable request/response logging
logging:
  enabled: true
  level: "info"
  include_body: true
  include_headers: true
