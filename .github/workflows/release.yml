name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
    - name: Get the release version from the tag
      shell: bash
      if: env.RELEASE_VERSION == ''
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "version is: ${GITHUB_REF#refs/tags/}"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Release Notes
      run: |
        # Extract release notes from CHANGELOG.md if it exists
        if [ -f "CHANGELOG.md" ]; then
          # Try to extract notes for this version
          awk "/^## \[?${GITHUB_REF#refs/tags/v}\]?/,/^## \[?[0-9]/ { if (/^## \[?[0-9]/ && NR > 1) exit; print }" CHANGELOG.md > release_notes.md
        else
          echo "Release ${GITHUB_REF#refs/tags/}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          echo "See commit history for detailed changes." >> release_notes.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Backworks ${{ env.RELEASE_VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

  build-release:
    name: Build Release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            suffix: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --verbose
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Create archive
      shell: bash
      run: |
        binary_name="backworks${{ matrix.suffix }}"
        archive_name="backworks-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
        
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          archive_name="${archive_name}.zip"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          7z a "${archive_name}" "${binary_name}" README.md LICENSE*
          echo "ASSET=${archive_name}" >> $GITHUB_ENV
        else
          archive_name="${archive_name}.tar.gz"
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          tar czf "${archive_name}" "${binary_name}" README.md LICENSE*
          echo "ASSET=${archive_name}" >> $GITHUB_ENV
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: ['create-release', 'build-release']
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')" # Only publish stable releases
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  publish-docker:
    name: Publish Docker Image
    needs: ['create-release', 'build-release']
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          backworks/backworks
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-homebrew:
    name: Update Homebrew Formula
    needs: ['create-release', 'build-release']
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')" # Only for stable releases
    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: backworks
