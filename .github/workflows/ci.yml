name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Node.js (for JavaScript handlers)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run doc tests
      run: cargo test --doc --all-features

    - name: Build release binary
      run: cargo build --release --verbose

    - name: Test examples
      run: |
        # Test hello-world example
        cd examples/hello-world
        timeout 30s ../../target/release/backworks start &
        SERVER_PID=$!
        sleep 5
        
        # Test endpoints
        curl -f http://localhost:3002/hello || exit 1
        echo '{"test": "data"}' | curl -f -X POST -H "Content-Type: application/json" -d @- http://localhost:3002/echo || exit 1
        
        # Cleanup
        kill $SERVER_PID || true
      if: matrix.os != 'windows-latest'

    - name: Test Windows examples
      run: |
        # Test hello-world example on Windows
        cd examples/hello-world
        Start-Process -FilePath "../../target/release/backworks.exe" -ArgumentList "start" -NoNewWindow
        Start-Sleep -Seconds 5
        
        # Test endpoints
        Invoke-RestMethod -Uri "http://localhost:3002/hello" -Method Get
        Invoke-RestMethod -Uri "http://localhost:3002/echo" -Method Post -Body '{"test": "data"}' -ContentType "application/json"
        
        # Cleanup
        Get-Process | Where-Object {$_.ProcessName -eq "backworks"} | Stop-Process -Force
      shell: powershell
      if: matrix.os == 'windows-latest'

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build backworks
      run: cargo build --release

    - name: Validate all examples
      run: |
        for example in examples/*/; do
          if [ -f "$example/package.json" ] || [ -f "$example/backworks.json" ]; then
            echo "Validating example: $example"
            cd "$example"
            timeout 10s ../../target/release/backworks validate || echo "Validation failed for $example"
            cd ../..
          fi
        done

    - name: Test project initialization
      run: |
        mkdir -p /tmp/test-projects
        cd /tmp/test-projects
        
        # Test different project templates
        $GITHUB_WORKSPACE/target/release/backworks init test-hello hello-world
        $GITHUB_WORKSPACE/target/release/backworks init test-api api
        $GITHUB_WORKSPACE/target/release/backworks init test-webapp webapp
        
        # Validate generated projects
        cd test-hello && $GITHUB_WORKSPACE/target/release/backworks validate
        cd ../test-api && $GITHUB_WORKSPACE/target/release/backworks validate
        cd ../test-webapp && $GITHUB_WORKSPACE/target/release/backworks validate
