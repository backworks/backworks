name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'src/**/*.rs'
      - 'examples/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'src/**/*.rs'
      - 'examples/**'

jobs:
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install mdbook
      run: |
        curl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.36/mdbook-v0.4.36-x86_64-unknown-linux-gnu.tar.gz | tar xz
        chmod +x mdbook
        sudo mv mdbook /usr/local/bin/

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build API documentation
      run: |
        cargo doc --no-deps --all-features
        echo '<meta http-equiv="refresh" content="0; url=backworks">' > target/doc/index.html

    - name: Build book documentation
      run: |
        if [ -f "book.toml" ]; then
          mdbook build
        else
          echo "No book.toml found, skipping book build"
        fi

    - name: Check documentation examples
      run: cargo test --doc --all-features

    - name: Check links in documentation
      uses: lycheeverse/lychee-action@v1.9.3
      with:
        args: |
          --verbose
          --no-progress
          --accept 200,204,301,302,429
          --exclude-all-private
          --exclude 'localhost'
          --exclude '127.0.0.1'
          --exclude '0.0.0.0'
          docs/
          README.md
        fail: true

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        destination_dir: api
        keep_files: true

    - name: Deploy book to GitHub Pages
      if: github.ref == 'refs/heads/main' && hashFiles('book.toml') != ''
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./book
        keep_files: true

  validate-examples:
    name: Validate Example Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build backworks
      run: cargo build --release

    - name: Validate example READMEs
      run: |
        for example in examples/*/; do
          if [ -f "$example/README.md" ]; then
            echo "Checking README for $example"
            # Check if README contains basic required sections
            if ! grep -q "## Overview\|## Description\|## Getting Started\|## Usage" "$example/README.md"; then
              echo "ERROR: $example/README.md missing required sections"
              exit 1
            fi
            echo "✓ $example/README.md looks good"
          fi
        done

    - name: Test example commands in documentation
      run: |
        for example in examples/*/; do
          if [ -f "$example/package.json" ] || [ -f "$example/backworks.json" ]; then
            echo "Testing example: $example"
            cd "$example"
            
            # Test that the example can start (timeout after 10 seconds)
            timeout 10s ../../target/release/backworks start &
            SERVER_PID=$!
            sleep 3
            
            # Kill the server
            kill $SERVER_PID 2>/dev/null || true
            wait $SERVER_PID 2>/dev/null || true
            
            cd ../..
            echo "✓ $example can start successfully"
          fi
        done

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Spell check with cspell
      uses: streetsidesoftware/cspell-action@v5
      with:
        files: |
          **/*.md
          **/*.rs
          **/*.yaml
          **/*.yml
          **/*.toml
        config: |
          {
            "version": "0.2",
            "language": "en",
            "words": [
              "Backworks",
              "JSONPlaceholder",
              "HTTPBin",
              "struct",
              "async",
              "await",
              "serde",
              "tokio",
              "axum",
              "tracing",
              "uuid",
              "chrono",
              "reqwest",
              "clap",
              "anyhow",
              "thiserror",
              "yaml",
              "json",
              "api",
              "http",
              "https",
              "url",
              "uri",
              "cors",
              "middleware",
              "handler",
              "proxy",
              "runtime",
              "javascript",
              "nodejs",
              "python",
              "js",
              "ts",
              "tsx",
              "jsx",
              "md",
              "yml",
              "toml",
              "cfg",
              "env",
              "os",
              "cli",
              "stdout",
              "stderr",
              "stdin",
              "utf8",
              "ascii",
              "unix",
              "github",
              "codecov",
              "deps",
              "deps",
              "rustc",
              "rustfmt",
              "clippy",
              "musl",
              "aarch64",
              "x86_64",
              "darwin",
              "msvc",
              "linux",
              "windows",
              "macos"
            ],
            "ignoreWords": [],
            "ignorePaths": [
              "target/**",
              "node_modules/**",
              "*.lock",
              "*.log"
            ]
          }
